name: lens
version: 4.1.2
id: lens-4.1.2-f21b6c28281e33c60d05c979f139a034
license: BSD3
copyright: Copyright (C) 2012-2014 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
package-url:
synopsis: Lenses, Folds and Traversals
description: This package comes \"Batteries Included\" with many useful lenses for the types
             commonly used from the Haskell Platform, and with tools for automatically
             generating lenses and isomorphisms for user-supplied data types.
             .
             The combinators in @Control.Lens@ provide a highly generic toolbox for composing
             families of getters, folds, isomorphisms, traversals, setters and lenses and their
             indexed variants.
             .
             An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
             .
             An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
             .
             A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
             .
             Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
             .
             More information on the care and feeding of lenses, including a brief tutorial and motivation
             for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
             .
             A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
             .
             /Lenses, Folds and Traversals/
             .
             With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
             .
             .
             <<http://i.imgur.com/4fHw3Fd.png>>
             .
             <Hierarchy.png (Local Copy)>
             .
             You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
             use any element of the hierarchy as any type it linked to above it.
             .
             The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
             .
             For instance:
             .
             * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
             .
             * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
             .
             /Minimizing Dependencies/
             .
             If you want to provide lenses and traversals for your own types in your own libraries, then you
             can do so without incurring a dependency on this (or any other) lens package at all.
             .
             /e.g./ for a data type:
             .
             > data Foo a = Foo Int Int a
             .
             You can define lenses such as
             .
             > -- bar :: Lens' (Foo a) Int
             > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
             > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
             .
             > -- quux :: Lens (Foo a) (Foo b) a b
             > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
             > quux f (Foo a b c) = fmap (Foo a b) (f c)
             .
             without the need to use any type that isn't already defined in the @Prelude@.
             .
             And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
             .
             > -- traverseBarAndBaz :: Traversal' (Foo a) Int
             > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
             > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
             .
             What is provided in this library is a number of stock lenses and traversals for
             common haskell types, a wide array of combinators for working them, and more
             exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules: Codec.Compression.Zlib.Lens Control.Exception.Lens
                 Control.Lens Control.Lens.Action Control.Lens.At
                 Control.Lens.Combinators Control.Lens.Cons Control.Lens.Each
                 Control.Lens.Empty Control.Lens.Equality Control.Lens.Extras
                 Control.Lens.Fold Control.Lens.Getter Control.Lens.Indexed
                 Control.Lens.Internal Control.Lens.Internal.Action
                 Control.Lens.Internal.Bazaar Control.Lens.Internal.ByteString
                 Control.Lens.Internal.Context Control.Lens.Internal.Deque
                 Control.Lens.Internal.Exception Control.Lens.Internal.Fold
                 Control.Lens.Internal.Getter Control.Lens.Internal.Indexed
                 Control.Lens.Internal.Instances Control.Lens.Internal.Iso
                 Control.Lens.Internal.Level Control.Lens.Internal.Magma
                 Control.Lens.Internal.Prism Control.Lens.Internal.Reflection
                 Control.Lens.Internal.Review Control.Lens.Internal.Setter
                 Control.Lens.Internal.TH Control.Lens.Internal.Zoom
                 Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
                 Control.Lens.Loupe Control.Lens.Operators Control.Lens.Plated
                 Control.Lens.Prism Control.Lens.Reified Control.Lens.Review
                 Control.Lens.Setter Control.Lens.TH Control.Lens.Traversal
                 Control.Lens.Tuple Control.Lens.Type Control.Lens.Wrapped
                 Control.Lens.Zoom Control.Monad.Error.Lens
                 Control.Monad.Primitive.Lens Control.Parallel.Strategies.Lens
                 Control.Seq.Lens Data.Aeson.Lens Data.Array.Lens Data.Bits.Lens
                 Data.ByteString.Lens Data.ByteString.Strict.Lens
                 Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
                 Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
                 Data.List.Split.Lens Data.Map.Lens Data.Sequence.Lens Data.Set.Lens
                 Data.Text.Lens Data.Text.Strict.Lens Data.Text.Lazy.Lens
                 Data.Tree.Lens Data.Typeable.Lens Data.Vector.Lens
                 Data.Vector.Generic.Lens Generics.Deriving.Lens GHC.Generics.Lens
                 System.Exit.Lens System.FilePath.Lens System.IO.Error.Lens
                 Language.Haskell.TH.Lens Numeric.Lens
hidden-modules: Control.Lens.Internal.TupleIxedTH
trusted: False
import-dirs: /home/greghale/Programming/haskell/haskell-tetrode-ephys/.cabal-sandbox/lib/x86_64-linux-ghc-7.6.3/lens-4.1.2
library-dirs: /home/greghale/Programming/haskell/haskell-tetrode-ephys/.cabal-sandbox/lib/x86_64-linux-ghc-7.6.3/lens-4.1.2
hs-libraries: HSlens-4.1.2
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: aeson-0.7.0.3-20053fb5c6a139a7db54ac3df05a6e7a
         array-0.4.0.1-3b78425c10ff2dad7acf7e8c8ae014c3
         base-4.6.0.1-8aa5d403c45ea59dcd2c39f123e27d57
         bifunctors-4.1.1.1-b1a84157250b46127c8eb3a8892271c1
         bytestring-0.10.0.2-4f93248f75667c2c3321a7a6761b576f
         comonad-4.2-a4ae9d275ccbba539106194a2746b475
         containers-0.5.0.0-ab1dae9a94cd3cc84e7b2805636ebfa2
         contravariant-0.6-cb4a4234ee8a620e20ed9207b7606ba0
         distributive-0.4.4-31280925967d7840defeb2b6aced989f
         exceptions-0.6.1-f70f88b82839651399b93a47289c5b73
         filepath-1.3.0.1-b12cbe18566fe1532a1fda4c85e31cbe
         free-4.7.1-e6253046b81a2e30d3e4fbe1712bb14c
         ghc-prim-0.3.0.0-d5221a8c8a269b66ab9a07bdc23317dd
         hashable-1.2.2.0-5c415b232854b5fb961fe4923ec037c7
         mtl-2.0.1.1-931c32aee0a9bdeaf8811a8c74b8921d
         parallel-3.2.0.4-6b28f3e9db87f9045e4a465cbf1af2ba
         primitive-0.5.3.0-7b5ab7d915f9ab4fe7ef3c28d7621c35
         profunctors-4.0.4-6d836ac440bc7188ca462c60a63d7a30
         reflection-1.4-59f99121e5a30d4841518e6b3345f9ed
         scientific-0.2.0.2-45d0a2b52667d7b9be4651853abb8053
         semigroupoids-4.0.2-5bb9ea85d6ce9a7dc1e02a3489ea67e8
         semigroups-0.14-08641204994204fbaadee561d6016f53
         split-0.2.2-9ce33138f4fcfb9c37f6e6c300bcc367
         tagged-0.7.2-35178383c175a0eaa905b0ea9826a924
         template-haskell-2.8.0.0-a3012803fde1dc362e555b35a1a78e6d
         text-1.1.1.2-a0df63a7b995ee452c77243b55d31049
         transformers-0.2.2.1-fa6b9e35d6baf64fac32fcc63a2f8b73
         transformers-compat-0.3-8f5365510f930891198822102a39d49c
         unordered-containers-0.2.4.0-39fb89e44f7078cc623727afa65172c4
         utf8-string-0.3.7-26a8ed8ca48fe809983bde6faca943a9
         vector-0.10.9.1-64ee596f6ad90f94ae9a52b3515201ad
         void-0.6.1-22d40faa1fee3c74c84bcabdbe3eda4b
         zlib-0.5.4.1-13ba81ac0d7e6f3bdf1ee5ddce4e9aab
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/greghale/Programming/haskell/haskell-tetrode-ephys/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.6.3/lens-4.1.2/html/lens.haddock
haddock-html: /home/greghale/Programming/haskell/haskell-tetrode-ephys/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.6.3/lens-4.1.2/html
